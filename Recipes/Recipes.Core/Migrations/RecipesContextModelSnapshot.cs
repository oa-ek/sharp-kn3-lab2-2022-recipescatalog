// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Recipes.Core;

#nullable disable

namespace Recipes.Core.Migrations
{
    [DbContext(typeof(RecipesContext))]
    partial class RecipesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< Updated upstream
                            Id = "03806760-b913-402f-81fa-8e2e1cb9f2b2",
                            ConcurrencyStamp = "9bdd5573-49bd-4e2e-8f7d-96468835ad28",
=======
                            Id = "dfc014e7-9f2d-4d8f-8320-4036afe25bfa",
                            ConcurrencyStamp = "f3ae5392-7011-4257-b3a9-70ec3ba8eb4a",
>>>>>>> Stashed changes
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
<<<<<<< Updated upstream
                            Id = "a97639bb-fbdd-46b4-ab20-5cc170c39bc6",
                            ConcurrencyStamp = "dd4c36de-0e9c-4856-a8a5-ac9b647bb79e",
=======
                            Id = "0cd6284e-47fb-4d76-ba0b-587ff7091d4b",
                            ConcurrencyStamp = "7a77ad23-6209-4b6f-beee-d2b96343a210",
>>>>>>> Stashed changes
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
<<<<<<< Updated upstream
                            Id = "4a4dfafd-57d1-4169-a238-b017f4e8a81a",
                            ConcurrencyStamp = "c8530f43-4c71-409b-9dda-4e15cd489645",
=======
                            Id = "5ee88ac3-2a1f-4f9f-b58b-2a51793d479c",
                            ConcurrencyStamp = "c5cf8cf7-88c8-4acd-bbd8-ac0b69341155",
>>>>>>> Stashed changes
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< Updated upstream
                            UserId = "ca3f9430-8795-45b5-88eb-216c2fcd063e",
                            RoleId = "03806760-b913-402f-81fa-8e2e1cb9f2b2"
                        },
                        new
                        {
                            UserId = "ca3f9430-8795-45b5-88eb-216c2fcd063e",
                            RoleId = "a97639bb-fbdd-46b4-ab20-5cc170c39bc6"
                        },
                        new
                        {
                            UserId = "ca3f9430-8795-45b5-88eb-216c2fcd063e",
                            RoleId = "4a4dfafd-57d1-4169-a238-b017f4e8a81a"
                        },
                        new
                        {
                            UserId = "19e03eb0-dd08-4447-b305-917572b6554f",
                            RoleId = "a97639bb-fbdd-46b4-ab20-5cc170c39bc6"
                        },
                        new
                        {
                            UserId = "19e03eb0-dd08-4447-b305-917572b6554f",
                            RoleId = "4a4dfafd-57d1-4169-a238-b017f4e8a81a"
                        },
                        new
                        {
                            UserId = "8bd7d40c-1aa7-4288-81ee-2686511fc442",
                            RoleId = "4a4dfafd-57d1-4169-a238-b017f4e8a81a"
=======
                            UserId = "864624f5-a887-43f8-9e09-8ad194effef7",
                            RoleId = "dfc014e7-9f2d-4d8f-8320-4036afe25bfa"
                        },
                        new
                        {
                            UserId = "864624f5-a887-43f8-9e09-8ad194effef7",
                            RoleId = "0cd6284e-47fb-4d76-ba0b-587ff7091d4b"
                        },
                        new
                        {
                            UserId = "864624f5-a887-43f8-9e09-8ad194effef7",
                            RoleId = "5ee88ac3-2a1f-4f9f-b58b-2a51793d479c"
                        },
                        new
                        {
                            UserId = "568da135-a8a5-4687-bda9-c89f039fdb84",
                            RoleId = "0cd6284e-47fb-4d76-ba0b-587ff7091d4b"
                        },
                        new
                        {
                            UserId = "568da135-a8a5-4687-bda9-c89f039fdb84",
                            RoleId = "5ee88ac3-2a1f-4f9f-b58b-2a51793d479c"
                        },
                        new
                        {
                            UserId = "08170544-0f90-48f8-91de-4b2d060c11fd",
                            RoleId = "5ee88ac3-2a1f-4f9f-b58b-2a51793d479c"
>>>>>>> Stashed changes
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Recipes.Core.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameCategory")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Recipes.Core.InfoDish", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int?>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<string>("CookingTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Difficulty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingredients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Preparation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TagsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("TagsId");

                    b.ToTable("InfoDishes");
                });

            modelBuilder.Entity("Recipes.Core.InfoDishTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Recipes.Core.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<< Updated upstream
                            Id = "ca3f9430-8795-45b5-88eb-216c2fcd063e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "899d2673-cd75-45b6-9715-87055b43de6f",
=======
                            Id = "864624f5-a887-43f8-9e09-8ad194effef7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ddaeb41-9669-4d77-8327-a82fe98fe6f3",
>>>>>>> Stashed changes
                            Email = "admin@recipes.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@RECIPES.COM",
                            NormalizedUserName = "ADMIN@RECIPES.COM",
<<<<<<< Updated upstream
                            PasswordHash = "AQAAAAEAACcQAAAAEPcRQYb7dKQbBgeJkKOdWC5ZAW/TkJQMFlucb2bFmM968FtXcHDpFRloJyRYDhuDRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aceb4754-1310-45ed-b065-cada52c559a9",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEBySkYgV/itwdCghsHRqCjBS2kGpgEiciQPaTBLZhcgUjcfBALI4jZCiFsgMwBp8kQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c689fdf9-8fc5-44d7-9c45-d86b33277907",
>>>>>>> Stashed changes
                            TwoFactorEnabled = false,
                            UserName = "admin@recipes.com"
                        },
                        new
                        {
<<<<<<< Updated upstream
                            Id = "19e03eb0-dd08-4447-b305-917572b6554f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ac99429-e049-4782-869b-5ca35e558037",
=======
                            Id = "568da135-a8a5-4687-bda9-c89f039fdb84",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b975300-4f59-4e83-9415-d77ac4fda27a",
>>>>>>> Stashed changes
                            Email = "manager@recipes.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@RECIPES.COM",
                            NormalizedUserName = "MANAGER@RECIPES.COM",
<<<<<<< Updated upstream
                            PasswordHash = "AQAAAAEAACcQAAAAECRFlppYOesWnjNO1CSx8cOeH9qJKrOamI7pT11MNHkxga5Mmj50fRtbtMMNFHSLcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb4d2d28-2cec-45a2-acb8-44056d17b959",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEPn8EcvMI8F0QcA2C+Si36B/i2t5ZLbjTfvNZiGIJPDFj3XxPpqRHqwAca+qs9USPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "993c76e9-7af1-4752-88ef-bc355e11e084",
>>>>>>> Stashed changes
                            TwoFactorEnabled = false,
                            UserName = "manager@recipes.com"
                        },
                        new
                        {
<<<<<<< Updated upstream
                            Id = "8bd7d40c-1aa7-4288-81ee-2686511fc442",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6707cc11-068d-424f-afc8-34ce0f413e16",
=======
                            Id = "08170544-0f90-48f8-91de-4b2d060c11fd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf4f59f4-fecf-4dea-81f4-6077dabbfafe",
>>>>>>> Stashed changes
                            Email = "user@recipes.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@RECIPES.COM",
                            NormalizedUserName = "USER@RECIPES.COM",
<<<<<<< Updated upstream
                            PasswordHash = "AQAAAAEAACcQAAAAEKbH0yjocI/FkZ0dI3Vxv0ynp+RlvXTUi9e9gxL65rg1YDMmHlvVbtmevkGV/QQ2yQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7b90e305-bbb5-4487-b3d6-f8266b82041d",
=======
                            PasswordHash = "AQAAAAEAACcQAAAAEKHUCu+WyoNDMh/zmbsNADoJlRaBhzgwrvT201h/RGRi6HSN4g5MkjMEOQKh6RJnPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8770d008-e7a2-4859-b2d2-86c6433c824c",
>>>>>>> Stashed changes
                            TwoFactorEnabled = false,
                            UserName = "user@recipes.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Recipes.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Recipes.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Recipes.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Recipes.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recipes.Core.InfoDish", b =>
                {
                    b.HasOne("Recipes.Core.Category", "Categories")
                        .WithMany("infoDish")
                        .HasForeignKey("CategoriesId");

                    b.HasOne("Recipes.Core.InfoDishTag", "Tags")
                        .WithMany("infoDish")
                        .HasForeignKey("TagsId");

                    b.Navigation("Categories");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Recipes.Core.Category", b =>
                {
                    b.Navigation("infoDish");
                });

            modelBuilder.Entity("Recipes.Core.InfoDishTag", b =>
                {
                    b.Navigation("infoDish");
                });
#pragma warning restore 612, 618
        }
    }
}
